*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.contenedor{
    background-color: #ccc;
    width: 90%;
    max-width: 1000px; /*p/q no se pase de los 1000px de ancho*/
    margin: auto;

    /*flex*/
    display: flex;
    flex-flow: row wrap;
}

/*El '.contenedor' es el padre de todos los demás elementos, por ello es mejor colocarle el flex allí p/poder manipularlos*/

body{
    background-color: #e9e9e9;
    font-family: sans-serif;
}
header{
    background-color: #2c3e50;
    width: 100%; /*p/q abarque todo el documento*/
    padding: 20px;

    /*Le colocamos un 'flex' pq éste tmb será un elemento padre*/
    display: flex;
    justify-content: space-between; /*coloca el logo x un lado y el vav por el otro*/
    align-items: center; /*xq es una línea de elementos*/
    flex-direction: row;/*pone lo elementos en línea, q ya están pero acá están especidicados*/
    flex-wrap: wrap;/*si un elemento no entra, q se coloque debajo, por el tema del menú q miede un 50%*/
}

/*El 'header' es elemento hijo del '.contenedor', pero a su vez es elemento padre del navegador y del logo*/

header .logo{
    font-size: 30px;
}

header .logo img{
    width: 50px; /*le doy tamaño y luego ubico la imagen*/
    vertical-align: top;/*para que la img se acomode bien*/
}

header .logo a{
    color: #fff;
    text-decoration: none;
    line-height: 79px; /*esas medidas son para alinear el texto verticalmente con la img, que no es un cuadrado, sin usar tanto flex'*/
}

header nav{
    width: 50%;
 
    /*le coloco 'flex' pq éste tmb es un elemento padre de todos los enlaces*/
    display: flex;
    flex-wrap: wrap;
    align-items: center;
}

header nav a{
    background-color: #c0392b;
    color: #fff;
    text-align: center;
    text-decoration: none; /*esto se podría haber puesto en el body*/
    padding: 10px;
     
    /*como los 'a' son elementos hijos de un padre al que se le aplicó 'flex´, a éstos se les puede aplicar directamente*/
    flex-grow: 1; /*especifica el factor de crecimiento de un elemento flexible (que tiene asignado display:flex), en su dirección principal. Es qué cantidad del espacio restante dentro del contenedor flexible, debería ocupar el item en cuestión. "Todos abarcarán el tamaño que necesiten para abarcar el 100%"*/
}

header nav a:hover{
    background-color: #e74c3c;
}

.main{
    background-color: #fff;
    padding: 20px;
    flex: 1 1 70%;
    /*El 1ro es la proporción que dice cuanto crecería el elemento. El 2do la proporciónen cuanto se encogería en comparación a los demás y el 3ro (70%) sería el width.
    Tmb se puede hacer que el aside tenga un tamaño fijo si se agranda o se achica:
    aside{
        flex: 0 0 300px;
    }
    Significa que no quiero que se achique ni que se agrande, sólo q mantenga los 300 px.
    Y el main debería ir así:
    .main{
        flex:1;
    } 
    que será el que modifique su tamaño*/
}

.main article{
    margin-bottom: 20px;
    padding-bottom: 20px;
    border-bottom: 1px solid #000;
}

.main article:nth-last-child(1){
    margin-bottom: 0;
    padding-bottom: 0;
    border-bottom: none;
}
/*al último elemento no le voy a aplicar ni el margin ni el padding ni el borde*/

aside{
    background-color: #e67e22;
    padding: 20px;

    /*Es un elemento hijo y padre al mismo tiempo. FLEX. El 'flex' ahora abarca hasta abajo del monitor si es que seguimos agregando artículos*/
    flex: 1 1 30%;/*ahora abarcca el 30% de lo que le faltaba*/
    display: flex;/*p/q podamos manipular a sus hijos*/
    flex-wrap: wrap;
    justify-content: flex-start;
    flex-direction: column; /*p/q tenga una relación de columnas*/

}

aside .widget{
    background-color: #d35400;
    height: 150px;
    margin:10px;
}

footer{
    background-color: #2c3e50;
    width: 100%;
    padding: 20px;

    /*no olvidarse de poner 'display: flex' cuando queres trabajar con elementos padres*/
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;/*coloca un elemento a la izq. y el otro a la der.*/
}

footer .links{
    background-color: #c0392b;
    display: flex;
    flex-wrap: wrap;
}

footer .links a{
    flex-grow: 1;/*p/q abarque el 100%*/
    color: #fff;
    padding: 10px;
    text-align: center;
    text-decoration: none;
}

footer .links a:hover{
    background-color: #e74c3c;
}

footer .social{
    background-color: #e67e22;
}

footer .social a{
    color: #fff;
    text-decoration: none;
    padding: 10px;
    display: inline-block; /*xq no hay 'flex' en este bloque y es necesario poner un elemento al lado del otro y reciban así los valors que le pusimos de 'padding'*/
}

/*Agregamos los media queries*/

@media screen and  (max-width: 800px) /*cuando llegue a un dispositivo de 800px, le cambiaremos las propiedades especificadas más abajo: que pase a una estructura de columna, para que cada elemento que esté dentro del '.contenedor', se ubiquen uno debajo del otro,*/{

        .contenedor{
            flex-direction: column;
        }

        header{
            flex-direction: column;/*Esto se hace pq x defecto están ubicados en filas*/
            padding: 0;
        }

        header .logo{
            margin: 20px 0;
        }

        header nav{
            width: 100%; /*pq estaba del 50%*/
        }

        aside{
            flex-direction: row;
            flex: 0;
        }

        aside .widget{
            /*ahora como lo pasamos a fila, hay que ponerle un ancho*/
            flex-grow: 1;/*p/q sean del mismo ancho. Si agregas otro widget más, se divide proporcionalmente*/
        }
}

@media  screen and (max-width:600px){
    aside{
        flex-direction: column;/*q va a ser otra vez de columnas*/
    }
    footer{
        justify-content: space-around;
    }
}